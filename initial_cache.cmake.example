# Initial cache variables for GADfit

# The syntax used here is
#  set(<variable> <value> CACHE <type> <docstring>) .
# You only need to edit the <value> parameter.

# GNU compilers and flags
#set(CMAKE_CXX_FLAGS "" CACHE STRING "")
#set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -DNDEBUG" CACHE STRING "")
#set(CMAKE_CXX_FLAGS_DEBUG "-Og -g -Wall -Wextra -Wcast-align -Wformat -Winvalid-pch -Wmissing-declarations -Wmissing-include-dirs -Wconversion -Wredundant-decls -Wswitch-default -Wswitch-enum -pedantic" CACHE STRING "")
#set(CMAKE_Fortran_COMPILER mpif90 CACHE STRING "")
#set(CMAKE_Fortran_FLAGS "-ffree-line-length-0" CACHE STRING "")
#set(CMAKE_Fortran_FLAGS_RELEASE "-O3 -funroll-all-loops -fcoarray=lib" CACHE STRING "")
#set(CMAKE_Fortran_FLAGS_DEBUG "-O3 -g -Wall -Wno-maybe-uninitialized -Wextra -pedantic -fcheck=all -ffpe-trap=zero,overflow -fbacktrace -fcoarray=lib -std=f2008ts" CACHE STRING "")

# Intel compilers and flags
#set(CMAKE_C_COMPILER icc CACHE STRING "")
#set(CMAKE_CXX_COMPILER icpc CACHE STRING "")
#set(CMAKE_CXX_FLAGS_RELEASE "-O3 -ipo -xHost -fp-model precise " CACHE STRING "")
#set(CMAKE_CXX_FLAGS_DEBUG "-O3 -g -debug all -traceback" CACHE STRING "")
#set(CMAKE_Fortran_COMPILER ifort CACHE STRING "")
#set(CMAKE_Fortran_FLAGS_RELEASE "-O3 -ipo -xHost -fp-model precise -coarray=shared" CACHE STRING "" FORCE)
#set(CMAKE_Fortran_FLAGS_DEBUG "-O0 -g -debug all -check all -fpe0 -traceback -warn -coarray=shared -std08" CACHE STRING "")

# Whether to build the C++ or Fortran version of GADfit
set(BUILD_CXX_VERSION ON CACHE BOOL "")

# Whether to build in Release or Debug configuration.
set(CMAKE_BUILD_TYPE Release CACHE STRING "")

# Whether to build a shared or a static library.
set(BUILD_SHARED ON CACHE BOOL "")

# Where to install GADfit
set(CMAKE_INSTALL_PREFIX /usr/local/gadfit CACHE STRING "")

# Whether to use quadruple or double precision (Fortran only).
set(QUAD_PRECISION OFF CACHE BOOL "")

# Use this prefix if you want to run the tests in parallel with
# GFortran. Do not use it with the Intel compiler (it handles Coarrays
# differently). With Intel, the number of cores used is controlled by
# the FOR_COARRAY_NUM_IMAGES environment variable.
#set(TESTS_RUN_PREFIX mpirun -np 8 CACHE STRING "")

# If the code contains calls to the GSL library, then GSL_DIR should
# point to the GSL install directory. If GSL_DIR is left empty or is
# incorrect, GADfit will compile without the GSL related procedures.
#set(GSL_DIR /usr/local/gsl CACHE STRING "")

# A linear algebra library is necessary when using GADfit or when
# running the examples, but not while building the main library. If
# not given or not working, the fallback Lapack library is used for
# running the tests. Allowed values are
#   lapack
#   atlas
#   mkl
#set(LINALG_FLAVOR lapack CACHE STRING "")

# Linalg library directories
#set(LIBRARY_PATHS /usr/local/atlas/lib CACHE STRING "")

# Linalg libraries. Must be shared libraries. Cannot use full path
# here (split the full path between LIBRARY_PATHS and LIBRARIES).
#set(LIBRARIES tatlas CACHE STRING "")

# Location of libcaf_mpi.a
#set(OPEN_COARRAYS /usr/local/opencoarrays/lib/libcaf_mpi.a CACHE STRING "")
